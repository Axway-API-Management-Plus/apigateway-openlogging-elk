version: '3.7'
services:
  # The core component
  elasticsearch1:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.0
    container_name: elasticsearch1
    environment:
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=/usr/share/elasticsearch/${ELASTICSEARCH_KEY}
      - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/${ELASTICSEARCH_CRT}
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/${ELASTICSEARCH_CA}
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.key=/usr/share/elasticsearch/${ELASTICSEARCH_KEY}
      - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/${ELASTICSEARCH_CRT}
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/${ELASTICSEARCH_CA}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - ALL
    volumes:
      - type: volume
        source: logs
        target: /var/log
      - type: volume
        source: esdata1
        target: /usr/share/elasticsearch/data
      - ${PWD}/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ${PWD}/certificates:/usr/share/elasticsearch/config/certificates
    networks:
      - elastic
      - ingress
    ports:
      - 9200:9200
      - 9300:9300

  # This is optional, but good to have to perform manual queries and create custom dashboards
  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.0
    container_name: kibana
    environment:
      - SERVER_NAME=localhost
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOST}
      - KIBANA_SYSTEM_USERNAME=${KIBANA_SYSTEM_USERNAME}
      - KIBANA_SYSTEM_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
      - ELASTICSEARCH_API_KEY=${ELASTICSEARCH_API_KEY}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=${ELASTICSEARCH_CA}
      - SERVER_SSL_ENABLED="true"
      - SERVER_SSL_KEY=${KIBANA_KEY}
      - SERVER_SSL_CERTIFICATE=${KIBANA_CRT}
    ports:
      - 5601:5601
    volumes:
      - type: volume
        source: logs
        target: /var/log
      - ${PWD}/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ${PWD}/certificates:/usr/share/kibana/config/certificates
    ulimits:
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - ALL
    networks:
      - elastic
      - ingress

  # Is receiving events from Filebeat and does pre-processing
  # https://github.com/elastic/logstash-docker/blob/master/build/logstash/env2yaml/env2yaml.go
  logstash:
    image: docker.elastic.co/logstash/logstash:7.9.0
    container_name: logstash
    environment:
      - xpack.monitoring.enabled=true
      - xpack.monitoring.elasticsearch.ssl.certificate_authority=${ELASTICSEARCH_CA}
      - xpack.monitoring.elasticsearch.hosts=${ELASTICSEARCH_HOST}
      - xpack.monitoring.elasticsearch.username=${LOGSTASH_SYSTEM_USERNAME}
      - xpack.monitoring.elasticsearch.password=${LOGSTASH_SYSTEM_PASSWORD}
      - ELASTICSEARCH_CERT=${ELASTICSEARCH_CRT}
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
      - LOGSTASH_USERNAME=${LOGSTASH_USERNAME}
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD}
      - API_BUILDER_URL=${API_BUILDER_URL}
      - API_BUILDER_SSL_CERT=${API_BUILDER_SSL_CERT}
      - MEMCACHED=${MEMCACHED}
    ports:
      - 5044:5044
    volumes:
      - ${PWD}/logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ${PWD}/logstash/pipelines:/usr/share/logstash/pipelines
      - ${PWD}/logstash/index_templates:/usr/share/logstash/index_templates
      - ${PWD}/certificates:/usr/share/logstash/config/certificates
    #command: logstash --path.config /usr/share/logstash/pipelines/pipelines.yml
    depends_on:
      - elasticsearch1
      - apibuilder4elastic
      - memcached
    networks:
      - elastic

  # Supposed to run side-by-side with the API-Gateway to watch the Open-Traffic Event files and send event to Logstash
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.9.0
    container_name: filebeat
    command: --strict.perms=false
    environment:
      - LOGSTASH=${LOGSTASH}
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
      - ELASTICSEARCH_CLUSTER_UUID=${ELASTICSEARCH_CLUSTER_UUID}
      - ELASTICSEARCH_CRT=${ELASTICSEARCH_CRT}
      - BEATS_SYSTEM_USERNAME=${BEATS_SYSTEM_USERNAME}
      - BEATS_SYSTEM_PASSWORD=${BEATS_SYSTEM_PASSWORD}
      - GATEWAY_NAME=${GATEWAY_NAME}
      - GATEWAY_REGION=${GATEWAY_REGION}
      - FILEBEAT_WORKER=${FILEBEAT_WORKER}
    ports:
      - 9000:9000
    volumes:
      - /etc/localtime:/etc/localtime:ro # Required to sync timezone of API-Gateway into the Docker-Container
      - ${PWD}/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ${APIGATEWAY_OPENTRAFFIC_FOLDER}:/var/log/opentraffic
      - ${APIGATEWAY_TRACES_FOLDER}:/var/log/trace
      - ${APIGATEWAY_EVENTS_FOLDER}:/var/log/events
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PWD}/certificates:/usr/share/filebeat/config/certificates
    networks:
      - elastic

  # Memcached is used by the Logstash pipeline to cache API-Lookup information that are used to get the API-Organization
  memcached:
    image: memcached:1.6.6-alpine
    container_name: memcached
    networks:
      - elastic

  # This is the API-Builder project exposing the API-Gateway Manager REST-API
  apibuilder4elastic:
    image: cwiechmann/apibuilder4elastic:v1.0.0-RC1
    container_name: apibuilder4elastic
    environment:
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
      - ADMIN_NODE_MANAGER=${ADMIN_NODE_MANAGER}
      - API_MANAGER_USERNAME=${API_MANAGER_USERNAME}
      - API_MANAGER_PASSWORD=${API_MANAGER_PASSWORD}
      - API_BUILDER_USERNAME=${API_BUILDER_USERNAME}
      - API_BUILDER_SSL_KEY=${API_BUILDER_SSL_KEY}
      - API_BUILDER_SSL_CERT=${API_BUILDER_SSL_CERT}
      - API_BUILDER_SSL_KEY_PASSWORD=${API_BUILDER_SSL_KEY_PASSWORD}
      - ENABLE_HTTP_PORT=false
      #- LOG_LEVEL=debug
    ports:
      - 8443:8443
    depends_on:
      - elasticsearch1
    networks:
      - elastic
    volumes:
      - ${PWD}/certificates:/app/config/certificates

volumes:
  esdata1:
  esdata2:
  logs:

networks:
  elastic:
  ingress:
