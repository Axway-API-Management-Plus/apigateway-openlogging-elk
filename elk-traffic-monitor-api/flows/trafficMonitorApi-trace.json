{
	"schemaVersion": "4",
	"info": {
		"name": "trafficMonitorApi - get /router/service/{serviceID}/ops/trace/{correlationID}"
	},
	"parameter": {
		"properties": {
			"params": {
				"type": "object",
				"description": "The parameters from the endpoint."
			},
			"request": {
				"type": "object",
				"description": "The HTTP request."
			},
			"config": {
				"type": "object",
				"description": "The service's configuration"
			},
			"env": {
				"type": "object",
				"description": "The host OS environment"
			}
		},
		"additionalProperties": false,
		"required": [
			"params",
			"request",
			"config",
			"env"
		]
	},
	"start": "javascript.4",
	"nodes": {
		"http.1": {
			"type": "nodehandler://axway-flow/http",
			"name": "Set HTTP Response",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "200",
					"metaName": "status",
					"metaDescription": "The HTTP status code"
				},
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.result",
					"metaName": "body",
					"metaDescription": "The response payload"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"elasticsearch.1": {
			"type": "nodehandler://@axway-api-builder-ext/api-builder-plugin-fn-elasticsearch/elasticsearch",
			"name": "Search trace",
			"method": "search",
			"parameters": [
				{
					"name": "query",
					"type": "jsonpath",
					"value": "$.elasticsearch.query",
					"metaName": "query",
					"metaDescription": "Defines the search definition using the Query DSL. Learn more: https://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl.html"
				},
				{
					"name": "size",
					"type": "number",
					"value": "10000",
					"metaName": "size",
					"metaDescription": "Defines the number of hits to return. Defaults to 10."
				},
				{
					"name": "index",
					"type": "jsonpath",
					"value": "$.index",
					"metaName": "index",
					"metaDescription": "Comma-separated list or wildcard expression of index names used to limit the request."
				},
				{
					"name": "sort",
					"type": "string",
					"value": "\"@timestamp:desc\"",
					"metaName": "sort",
					"metaDescription": "A comma-separated list of <field>:<direction> pairs."
				}
			],
			"outputs": {
				"next": {
					"context": "$.elasticsearch.result",
					"routes": [
						"javascript.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"http.2"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Search"
		},
		"javascript.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Format response",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$.elasticsearch.result.body.hits",
					"metaName": "data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"let result = [];\\n  \\n  data.hits.map(function(entry) {\\n    let traceObj = {};\\n    let message = entry._source.message;\\n    let dateObj = isoStringToDate(entry._source['@timestamp']);\\n    let dateObj2 = parseDate(entry._source['@timestamp']);\\n\\t\\n    // depth is the number of tabs befor start of the message. \\n    // Calculated based on count of white spaces divided by 4\\n    const depthRegex = /(?<=[\\\\]])\\\\s*/gm;\\n    let depthMatch = depthRegex.exec(message);\\n\\tlet depth = 1;\\n    \\n    if (depthMatch !== null){\\n      depth = Math.round(depthMatch[0].length/4);\\n    }\\n    \\n    traceObj.level = entry._source.level;\\n    traceObj.type = 'trace';\\n    traceObj.time = dateObj.getTime();\\n    traceObj.depth = depth;\\n    traceObj.text = message.substring(message.lastIndexOf(\\\"]\\\")+1,message.length).trim();\\n    \\n    result.push(traceObj);\\n    \\n  });\\n\\n  \\nfunction parseDate(input) {\\n  var parts = input.match(/(\\\\d+)/g);\\n  // new Date(year, month [, date [, hours[, minutes[, seconds[, ms]]]]])\\n  return new Date(parts[0], parts[1]-1, parts[2]); // months are 0-based\\n}\\n\\n  // Parse an ISO date string (i.e. \\\"2019-01-18T00:00:00.000Z\\\",\\n// \\\"2019-01-17T17:00:00.000-07:00\\\", or \\\"2019-01-18T07:00:00.000+07:00\\\",\\n// which are the same time) and return a JavaScript Date object with the\\n// value represented by the string.\\nfunction isoStringToDate( isoString ) {\\n\\n    // Split the string into an array based on the digit groups.\\n    var dateParts = isoString.split( /\\\\D+/ );\\n\\n    // Set up a date object with the current time.\\n    var returnDate = new Date();\\n\\n    // Manually parse the parts of the string and set each part for the\\n    // date. Note: Using the UTC versions of these functions is necessary\\n    // because we're manually adjusting for time zones stored in the\\n    // string.\\n    returnDate.setUTCFullYear( parseInt( dateParts[ 0 ] ) );\\n\\n    // The month numbers are one \\\"off\\\" from what normal humans would expect\\n    // because January == 0.\\n    returnDate.setUTCMonth( parseInt( dateParts[ 1 ] - 1 ) );\\n    returnDate.setUTCDate( parseInt( dateParts[ 2 ] ) );\\n\\n    // Set the time parts of the date object.\\n    returnDate.setUTCHours( parseInt( dateParts[ 3 ] ) );\\n    returnDate.setUTCMinutes( parseInt( dateParts[ 4 ] ) );\\n    returnDate.setUTCSeconds( parseInt( dateParts[ 5 ] ) );\\n    returnDate.setUTCMilliseconds( parseInt( dateParts[ 6 ] ) );\\n\\n    // Track the number of hours we need to adjust the date by based\\n    // on the timezone.\\n    var timezoneOffsetHours = 0;\\n\\n    // If there's a value for either the hours or minutes offset.\\n    if ( dateParts[ 7 ] || dateParts[ 8 ] ) {\\n\\n        // Track the number of minutes we need to adjust the date by\\n        // based on the timezone.\\n        var timezoneOffsetMinutes = 0;\\n\\n        // If there's a value for the minutes offset.\\n        if ( dateParts[ 8 ] ) {\\n\\n            // Convert the minutes value into an hours value.\\n            timezoneOffsetMinutes = parseInt( dateParts[ 8 ] ) / 60;\\n        }\\n\\n        // Add the hours and minutes values to get the total offset in\\n        // hours.\\n        timezoneOffsetHours = parseInt( dateParts[ 7 ] ) + timezoneOffsetMinutes;\\n\\n        // If the sign for the timezone is a plus to indicate the\\n        // timezone is ahead of UTC time.\\n        if ( isoString.substr( -6, 1 ) == \\\"+\\\" ) {\\n\\n            // Make the offset negative since the hours will need to be\\n            // subtracted from the date.\\n            timezoneOffsetHours *= -1;\\n        }\\n    }\\n\\n    // Get the current hours for the date and add the offset to get the\\n    // correct time adjusted for timezone.\\n    returnDate.setHours( returnDate.getHours() + timezoneOffsetHours );\\n\\n    // Return the Date object calculated from the string.\\n    return returnDate;\\n}\\n  \\n  return result;\"",
					"metaName": "code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises"
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"http.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"http.2"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"javascript.2": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Build ES query",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"let elasticQuery = ({\\n    \\\"bool\\\": {\\n      \\\"must\\\": [\\n        {\\\"term\\\": {\\n          \\\"correlationId\\\": data.params.correlationID\\n          }\\n        }\\n      ]\\n    }\\n  });\\n\\n  return elasticQuery;\"",
					"metaName": "code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises"
				}
			],
			"outputs": {
				"next": {
					"context": "$.elasticsearch.query",
					"routes": [
						"elasticsearch.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"http.2"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"http.2": {
			"type": "nodehandler://axway-flow/http",
			"name": "Set HTTP 500 Error Response",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "500",
					"metaName": "status",
					"metaDescription": "The HTTP status code"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"javascript.3": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Check Params",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"//only json is supported. \\n  //If param format is skipped automatically json is returned\\n  if(data.params.format != undefined && data.params.format != 'json') {\\n    throw {\\n      name: \\\"unknown format exception\\\",\\n      message: \\\"unknown format\\\"\\n    };\\n  }\"",
					"metaName": "code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises"
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"javascript.2"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"http.3"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"http.3": {
			"type": "nodehandler://axway-flow/http",
			"name": "Set HTTP 400 Response",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "400",
					"metaName": "status",
					"metaDescription": "The HTTP status code"
				},
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.error.message",
					"metaName": "body",
					"metaDescription": "The response payload"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"javascript.4": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Define Index",
			"method": "Execute",
			"parameters": [
				{
					"name": "code",
					"type": "string",
					"value": "\"let index = 'logstash-trace';\\n  if(data.config.testElasticIndex) {\\n    index = data.config.testElasticIndex;\\n  }\\n  return index;\"",
					"metaName": "code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises"
				},
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				}
			],
			"outputs": {
				"next": {
					"context": "$.index",
					"routes": [
						"javascript.3"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		}
	}
}