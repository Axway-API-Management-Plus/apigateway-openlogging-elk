{
	"schemaVersion": "4",
	"info": {
		"name": "Traffic-Monitor API - GetInfo",
		"description": "Used by Traffic monitor to display Request/Responses"
	},
	"parameter": {
		"properties": {
			"params": {
				"type": "object",
				"description": "The parameters from the endpoint."
			},
			"request": {
				"type": "object",
				"description": "The HTTP request."
			},
			"config": {
				"type": "object",
				"description": "The service's configuration"
			},
			"env": {
				"type": "object",
				"description": "The host OS environment"
			}
		},
		"additionalProperties": false,
		"required": [
			"params",
			"request",
			"config",
			"env"
		]
	},
	"start": "axway-api-management.1",
	"nodes": {
		"javascript.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Define GetInfo Index",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"let index = 'apigw-traffic-details*';\\n  //let index = 'getinfo_test_1688';\\n  \\n  if(data.config.testElasticIndex) {\\n    index = data.config.testElasticIndex;\\n  }\\n  \\n  return index;\"",
					"metaName": "code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.index",
					"routes": [
						"javascript.2"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"http.1"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"javascript.2": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Check GetInfo Params",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"//only json is supported. \\n  //If param format is skipped automatically json is returned\\n\\n  if(data.params.format != undefined && data.params.format != 'json') {\\n    throw {\\n      name: \\\"unknown format exception\\\",\\n      message: \\\"unknown format\\\"\\n    };\\n  }\\n\\n  return data.params;\"",
					"metaName": "code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.params",
					"routes": [
						"javascript.3"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"http.3"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"javascript.3": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Build GetInfo ES query",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"let elasticQuery = ({\\n    \\\"bool\\\": {\\n      \\\"must\\\": [\\n        {\\\"term\\\": {\\\"correlationId\\\": data.params.correlationID}},\\n          {\\\"term\\\": {\\\"processInfo.serviceId\\\": data.params.serviceID}}\\n      ]\\n    }\\n  });\\n  \\n  if(!data.user.gatewayManager.isAdmin) {\\n    var orgFilter;\\n    if(data.user.apiManager.role == \\\"admin\\\") {\\n      orgFilter = {\\n        exists: {\\n          \\\"field\\\" : \\\"transactionSummary.serviceContext\\\"\\n        }\\n      };\\n    } else {\\n      orgFilter = {\\n        term: {\\n          \\\"transactionSummary.serviceContext.apiOrg\\\" : data.user.apiManager.organizationName\\n        }\\n      };\\n    }\\n    elasticQuery.bool.must.push(orgFilter);\\n  }\\n  \\n  return elasticQuery;\"",
					"metaName": "code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.elasticsearch.query",
					"routes": [
						"elasticsearch.1",
						"javascript.4"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"http.1"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"elasticsearch.1": {
			"type": "nodehandler://@axway-api-builder-ext/api-builder-plugin-fn-elasticsearch/elasticsearch",
			"name": "Search GetInfo",
			"method": "search",
			"parameters": [
				{
					"name": "index",
					"type": "jsonpath",
					"value": "$.index",
					"metaName": "Index",
					"metaDescription": "Comma-separated list or wildcard expression of index names used to limit the request."
				},
				{
					"name": "query",
					"type": "jsonpath",
					"value": "$.elasticsearch.query",
					"metaName": "Query",
					"metaDescription": "Defines the search definition using the Query DSL. Learn more: https://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl.html"
				}
			],
			"outputs": {
				"next": {
					"context": "$.elasticsearch.result",
					"routes": [
						"javascript.4"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"http.1"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Search"
		},
		"http.2": {
			"type": "nodehandler://axway-flow/http",
			"name": "Response GetInfo",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "200",
					"metaName": "Status",
					"metaDescription": "The HTTP status code"
				},
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.result",
					"metaName": "Body",
					"metaDescription": "The response payload"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"javascript.4": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Format GetInfo Response",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"//init variables\\n  \\n  let transactionInfo = {};\\n  let sourceLegs = [];\\n  let resultLegs = [];\\n  let legParam = data.params.legID;\\n  let detailsParam = data.params.details;\\n  let sheadersParam = data.params.sheaders;\\n  let rheadersParam = data.params.rheaders;\\n  let elasticData = data.elasticsearch.result.body.hits;\\n  \\n  \\n  transactionInfo = elasticData.hits[0]._source;\\n  sourceLegs = transactionInfo.transactionElements;\\n  \\n  // Loop over legs\\n  for (var item in sourceLegs) {\\n    let sourceLeg = sourceLegs[item];\\n    let resultLeg = {};\\n    let details = {};\\n\\n\\tlet rheaders = [];\\n    let sheaders = [];\\n    \\n    if (legParam == '*' || legParam == sourceLeg.leg)\\n    {\\n    \\n      if (detailsParam == '1'){\\n        details.uri = sourceLeg.protocolInfo.http.uri;\\n        details.status = sourceLeg.protocolInfo.http.status;\\n        details.statustext = sourceLeg.protocolInfo.http.statusText;\\n        details.method = sourceLeg.protocolInfo.http.method;\\n        details.vhost = (typeof sourceLeg.protocolInfo.http.vhost === 'undefined') ? null : sourceLeg.protocolInfo.http.vhost; // needs to be checked - not avail in test data\\n        details.wafStatus = sourceLeg.protocolInfo.http.wafStatus;\\n        details.bytesSent = sourceLeg.protocolInfo.http.bytesSent;\\n        details.bytesReceived = sourceLeg.protocolInfo.http.bytesReceived;\\n        details.remoteName = sourceLeg.protocolInfo.http.remoteName;\\n        details.remoteAddr = sourceLeg.protocolInfo.http.remoteAddr;\\n        details.localAddr = sourceLeg.protocolInfo.http.localAddr;\\n        details.remotePort = sourceLeg.protocolInfo.http.remotePort;\\n        details.localPort = sourceLeg.protocolInfo.http.localPort; \\n        details.sslsubject = (typeof sourceLeg.protocolInfo.http.sslSubject === 'undefined') ? null : sourceLeg.protocolInfo.http.sslSubject; //need to be checked - not avail in test data \\n        details.leg = sourceLeg.leg;\\n        details.timestamp = Date.parse(transactionInfo['@timestamp']); //Needs to be formatted\\n        details.duration = sourceLeg.duration;\\n        details.correlationId = transactionInfo.correlationId;\\n        details.serviceName = sourceLeg.serviceName;\\n        details.subject = sourceLeg.protocolInfo.http.authSubjectId;\\n        details.operation = sourceLeg.operation;\\n        details.type = 'http'; //ToDo - currently hardcoded. Get it from path param in future\\n        details.finalStatus  = (typeof sourceLeg.finalStatus === 'undefined') ? null : sourceLeg.finalStatus; //need to be checked - not always avail in test data \\n        resultLeg.details = details;\\n      } else if (detailsParam == '0'){ \\n        resultLeg.details = null;\\n      } else{\\n        // No details element at all\\n      }\\n\\n                 \\n      // Formatting the rHeaders    \\n      if (rheadersParam == '1'){\\n        let rawRecvHeader = [];\\n        rawRecvHeader = sourceLeg.protocolInfo.recvHeader.split(\\\"\\\\r\\\\n\\\")\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t;\\n        let recvAttributes = [];   \\n\\n        rawRecvHeader.forEach(function (item,index){\\n        if (index !=0){\\n            let attribObj = {};        \\n            let n = item.indexOf(\\\":\\\");\\n            let attribName = item.substr(0,n).toString();\\n            let atrribValue = (item.substr(n+1).trim());\\n            if (attribName.length != 0) {\\n                attribObj[attribName]= atrribValue; \\n                recvAttributes.push(attribObj);\\n                }\\n            }\\n        });\\n        resultLeg.rheaders = recvAttributes;\\n      } else if (rheadersParam == '0'){   \\n        resultLeg.rheaders = null;\\n      } else {\\n        // No rheaders elemenmt at all\\n      }\\n\\n\\n      // Formatting the sHeaders\\n      \\n\\t  if (sheadersParam == '1') {\\n        let rawSendHeader = [];\\n        rawSendHeader = sourceLeg.protocolInfo.sentHeader.split(\\\"\\\\r\\\\n\\\")\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t;\\n        let sendAttributes = [];   \\n\\n        rawSendHeader.forEach(function (item,index){\\n        if (index !=0){\\n            let attribObj = {};        \\n            let n = item.indexOf(\\\":\\\");\\n            let attribName = item.substr(0,n).toString();\\n            let atrribValue = (item.substr(n+1).trim());\\n            if (attribName.length != 0) {\\n                attribObj[attribName]= atrribValue; \\n                sendAttributes.push(attribObj);\\n                }\\n            }\\n        });\\n\\n        resultLeg.sheaders = sendAttributes;\\n      } else if (sheadersParam == '0') {\\n        resultLeg.sheaders = null;\\n      } else {\\n        // No sheaders element at all\\n      }\\n\\n\\t  // Only when all legs are requested create an Array with leg objects.\\n      // Otherwise just return the leg object.\\n\\t  if (legParam == '*') {\\n      \\tresultLegs.push(resultLeg);\\n      } else {\\n        return resultLeg;\\n      }\\n\\n    }\\n  }\\n  return resultLegs;\"",
					"metaName": "code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"http.2"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [
						"http.1"
					],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"http.1": {
			"type": "nodehandler://axway-flow/http",
			"name": "Set HTTP 500 Response",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "500",
					"metaName": "Status",
					"metaDescription": "The HTTP status code"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"http.3": {
			"type": "nodehandler://axway-flow/http",
			"name": "Set HTTP 400 Response",
			"method": "setresponse",
			"parameters": [
				{
					"name": "status",
					"type": "number",
					"value": "400",
					"metaName": "Status",
					"metaDescription": "The HTTP status code"
				},
				{
					"name": "body",
					"type": "jsonpath",
					"value": "$.error.message",
					"metaName": "Body",
					"metaDescription": "The response payload"
				}
			],
			"outputs": {
				"next": {
					"context": "$.response",
					"routes": [],
					"metaName": "Next"
				}
			},
			"metaMethod": "Set HTTP Response"
		},
		"axway-api-management.1": {
			"type": "nodehandler://api-builder-plugin-axway-api-management/axway-api-management",
			"name": "Lookup current user",
			"method": "lookupCurrentUser",
			"parameters": [
				{
					"name": "requestHeaders",
					"type": "jsonpath",
					"value": "$.request.headers",
					"metaName": "Request Headers",
					"metaDescription": "The request headers are used to lookup the current users based on the current session cookie (VIDUSR)."
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"javascript.1"
					],
					"context": "$.user",
					"metaName": "Next"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Lookup current user"
		}
	}
}