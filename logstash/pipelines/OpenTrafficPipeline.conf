input { pipeline { address => "OpenTraffic" } }
# Please note, that this pipeline handles three different event types:
# 1. A transactionSummary which contains summary information
# 2. A transactionElement event, which contains all legs
# 3. A circuitPath event
filter {
  # Parse the received payload into a JSON-Object
  json {
      source => "[message]"
      target => "[message]"
  }
  # Use the given timestamp from OpenLog for the logstash timestamp send to ElasticSearch
  date {
      match => [ "timestamp", "UNIX_MS" ]
  }
  mutate {
    remove_field => ["agent", "ecs", "log", "host", "timestamp", "tags", "logType", "event" ]
  }
  # Take the given gatewayName (provided by filebeat) and replace the serviceName with that value 
  mutate {
    add_field => { "[processInfo][gatewayName]" => "%{[gatewayName]}" }
    add_field => { "[processInfo][gatewayRegion]" => "%{[gatewayRegion]}" }
    remove_field => [ "gatewayRegion", "gatewayName", "[processInfo][serviceName]", "[processInfo][domainId]" ]
  }
  # Check, if event is a Scheduled-Policy - Most of the properties are NULL
  if([correlationId]!="000000000000000000000000" and ![circuitPath] and ![transactionElement] and ![transactionSummary][path] and ![transactionSummary][protocol] and ![transactionSummary][protocolSrc]) {
    mutate { 
      add_field => { 
      "[type]" => "scheduledPolicy"
      "[transactionSummary][serviceContext][service]" => "Scheduled policy"
      "[transactionSummary][serviceContext][method]" => "N/A"
      "[transactionSummary][duration]" => "-1"
      "[transactionElements][leg0][finalStatus]" => "Pass"
      "[transactionElements][leg0][protocolInfo][http][uri]" => "N/A"
      "[transactionElements][leg0][protocolInfo][http][status]" => "901"
      "[transactionElements][leg0][protocolInfo][http][statusText]" => "OK"
      "[transactionElements][leg0][protocolInfo][http][method]" => "N/A"
      } 
      remove_field => "[transactionSummary][serviceContexts]"
    }
  # For all other events do ...
  } else {
    # If a transactionElement event is received it must be re-arragended to support up-serts into ES
    # Also delete the serviceName & operation as they are duplicates within the serviceContext
    if([transactionElement]) {
      ruby {
        code => "
          leg = event.get('transactionElement');
          no = event.get('[transactionElement][leg]');
          legNo = 'leg'.concat(no.to_s);
          event.set('[transactionElements][' + legNo + ']', leg);
          event.remove('[transactionElements][' + legNo + '][serviceName]');
          event.remove('[transactionElements][' + legNo + '][operation]');
        "
      }
      mutate {
        remove_field => ["transactionElement"]
      }
    }
    # If a transactionSummary event is received having a service context (which is an Array) get the first object and 
    # map it into a sinle object, as we can have only one
    if([transactionSummary][serviceContexts]) {
      ruby {
        # The Array might be empty
        code => "
          if event.get('[transactionSummary][serviceContexts][0]')
            leg = event.get('[transactionSummary][serviceContexts][0]');
            event.set('[transactionSummary][serviceContext]', leg);
          end
        "
      }
      mutate {
        remove_field => "[transactionSummary][serviceContexts]" # Remove the originally received serviceContexts array
        rename => ["[transactionSummary][serviceContext][org]", "[transactionSummary][serviceContext][appOrg]" ]
        remove_field => "[transactionSummary][serviceContext][client]" # We don't need the App-Client ID
        remove_field => "[transactionSummary][serviceContext][duration]" # We don't need the duration on a serviceContext
        remove_field => "[transactionSummary][serviceContext][status]" # Remove the status, as it's a duplicate to the status in the transactionSummary and not given for native APIs (e.g. Healthcheck)
      }
      # If we have a transactionSummary we have to enrich the API-Details (from API-Manager or locally looked up)
      # And only perform the API-Lookup for APIs (http) only
      if([transactionSummary] and ([transactionSummary][protocol] in ["http", "https"]) {
          # Create a key for the API
        mutate {
          add_field => { "apiCacheKey" => "%{[transactionSummary][path]}###%{[processInfo][groupId]}###%{[processInfo][gatewayRegion]}" }
        }
        # Lookup the cache with the created API-Key (API-Name---API-Path)
        memcached {
          hosts => "${MEMCACHED}"
          namespace => "api_details"
          get => { "%{apiCacheKey}" => "[apiDetails]" }
        }
        # If we have nothing in the cache, perform the Lookup via the HTTP-Builder API, which does a local & API-Manager Lookup
        if !([apiDetails]) {
          http {
            url => "${API_BUILDER_URL}/api/elk/v1/api/lookup/api"
            query => {
              "apiName" => "%{[transactionSummary][serviceContext][service]}"
              "apiPath" => "%{[transactionSummary][path]}"
              "groupId" => "%{[processInfo][groupId]}"
              "region" => "%{[processInfo][gatewayRegion]}"
            }
            cacert => "${API_BUILDER_SSL_CERT}"
            target_body => "apiDetails"
            add_field => { "[@metadata][updateAPICache]" => "true" }
          }
        }
        # At this point we should have the apiDetails either from the cache or looked up via HTTP
        if([apiDetails]) {
          mutate {
            copy => { "[apiDetails][organizationName]" => "[transactionSummary][serviceContext][apiOrg]" }
            copy => { "[apiDetails][version]" => "[transactionSummary][serviceContext][apiVersion]" }
            copy => { "[apiDetails][deprecated]" => "[transactionSummary][serviceContext][apiDeprecated]" }
            copy => { "[apiDetails][state]" => "[transactionSummary][serviceContext][apiState]" }
            copy => { "[apiDetails][apiSecurity]" => "[transactionSummary][serviceContext][apiSecurity]" }
            copy => { "[apiDetails][requestPolicy]" => "[transactionSummary][serviceContext][requestPolicy]" }
            copy => { "[apiDetails][routingPolicy]" => "[transactionSummary][serviceContext][routingPolicy]" }
            copy => { "[apiDetails][responsePolicy]" => "[transactionSummary][serviceContext][responsePolicy]" }
            copy => { "[apiDetails][faulthandlerPolicy]" => "[transactionSummary][serviceContext][faulthandlerPolicy]" }
            copy => { "[apiDetails][backendBasePath]" => "[transactionSummary][serviceContext][backendBasePath]" }
            # Take over configured custom properties for this API
            copy => { "[apiDetails][customProperties]" => "[transactionSummary][customProperties]" }
          }
          # Native APIs don't have a name, take it from the API-Details
          if !([transactionSummary][serviceContext][service]) {
            mutate {
              copy => { "[apiDetails][name]" => "[transactionSummary][serviceContext][service]" }
            }
          }
          # If the API has been looked up add it to the cache
          if([@metadata][updateAPICache]=="true") {
            memcached {
              hosts => "${MEMCACHED}"
              namespace => "api_details"
              ttl => "${LOOKUP_CACHE_TTL:600}"
              set => { "[apiDetails]" => "%{apiCacheKey}" }
            }
          }
        }
        mutate {
          remove_field => [ "apiDetails", "headers", "updateAPICache", "apiCacheKey" ]
        }
        # If the API-Lookup failed - Clone the event which is send to an Error index and shown in Traffic-Monitor
        if("_httprequestfailure" in [tags]) {
          clone {
            clones => ['errorEvent']
          }
          if [type] == 'errorEvent' {
            # Fill the URI based on the given path to have it shown in Traffic-Monitor
            mutate { add_field => { "[http][uri]" => "%{[transactionSummary][path]}" } }
            mutate { replace => { "[http][vhost]" => "Logstash Error" } }
            mutate { replace => { "[http][method]" => "LOGSTASH" } }
            mutate { replace => { "[http][status]" => "900" } }
            mutate { replace => { "[http][statusText]" => "ERROR" } }
            mutate { replace => { "[http][authSubjectId]" => "ID: %{[correlationId]}" } }
            mutate { replace => { "[serviceContext][method]" => "check the logs" } }
            # Make sure, the Correlation-ID is unique to avoid an update of the original document
            mutate { replace => { "[correlationId]" => "%{[correlationId]}-Error" } }
          }
        }
      }
    }
  }
  # Don't do the following for Error-Events, as ErrorEvents are just supposed to be shown in the Traffic-Monitor only
  # Summary index is for Kibana dashboards / analytics
  if([type] != "errorEvent" and [type] != "scheduledPolicy") {
    # Transaction Summary information (which is fulfilled at this point) needs to be cloned into a separate summary index
    if [transactionSummary] or [transactionElements][leg0] {
      clone {
        clones => ['summaryIndex']
      }
      if([type] == 'summaryIndex') {
        if([transactionSummary]) {
          # Change status value of transactionSummary to be aligned with finalStatus
          translate {
            field => "[transactionSummary][status]"
            destination => "[transactionSummary][finalStatus]"
            dictionary => {
              "success" => "Pass"
              "failure" => "Fail" 
              "exception" => "Error"
            }
            remove_field => "[transactionSummary][status]"
          }
          # Place all transactionSummary information directlly into the root
          # The path is skipped, as it is duplicated with http.uri and not available for all kind of events
          ruby {
            code => '
              event.remove("[transactionSummary][path]");
              event.get("transactionSummary").each { |k, v|
                event.set(k,v);
              }
              event.remove("transactionSummary");
            '
          }
        }
        # Also we need to copy some leg0 information into the summary index
        if [transactionElements][leg0] {
          mutate { 
            # Before copy - Remove stuff we don't need in the summaryIndex
            remove_field => [
              "[transactionElements][leg0][leg]",
              "[transactionElements][leg0][protocolInfo][recvHeader]",
              "[transactionElements][leg0][protocolInfo][recvHeader]",
              "[transactionElements][leg0][protocolInfo][recvPayload]", 
              "[transactionElements][leg0][protocolInfo][sentPayload]",
              "[transactionElements][leg0][protocolInfo][sentHeader]"
            ]
          }
          ruby {
            # This copies all kind of traffic (http, filetransfer, ...) to the root of the document (e.g. http.status, http.uri, ...)
            code => '
              event.get("[transactionElements][leg0][protocolInfo]").each { |k, v|
                event.set(k,v)
              }
            '
          }
          mutate {
            copy => { "[transactionElements][leg0][duration]" => "[duration]" }
            copy => { "[transactionElements][leg0][finalStatus]" => "[finalStatus]" }
            # Once we have copied - we can remove the original information from the summaryIndex event
            remove_field => ["transactionElements"] 
          }
          # For some requests (OPTIONS, some native calls) the finalStatus is not set - Set it based on the http.status
          if( ![finalStatus] ) {
            if ([http][status] >= 200 and [http][status] <= 299 ) {
              mutate { add_field => { "[finalStatus]" => "Pass" } }
            } else {
              mutate { add_field => { "[finalStatus]" => "Fail" } }
            }
          }
        }
      } 
    }
  }
}

output {
  if [type] == "summaryIndex" or [type] == "scheduledPolicy" or [type] == "errorEvent" {
    elasticsearch {
      hosts => "${ELASTICSEARCH_HOSTS}"
      ssl => true
      cacert => "${ELASTICSEARCH_CERT}"
      user => "${LOGSTASH_USERNAME}"
      password => "${LOGSTASH_PASSWORD}"
      index => "apigw-traffic-summary%{[@metadata][regionIndexSuffix]}"
      document_id => "%{correlationId}"
      action => "update"
      doc_as_upsert => true
      id => "TrafficSummary"
    }
  } else {
    elasticsearch {
      hosts => "${ELASTICSEARCH_HOSTS}"
      ssl => true
      cacert => "${ELASTICSEARCH_CERT}"
      user => "${LOGSTASH_USERNAME}"
      password => "${LOGSTASH_PASSWORD}"
      index => "apigw-traffic-details%{[@metadata][regionIndexSuffix]}"
      document_id => "%{correlationId}"
      action => "update"
      doc_as_upsert => true
      id => "StandardTrafficDetails"
    }
  }
# Enable if you would like to see outgoing event messages
#  stdout {
#    codec => rubydebug
#  }
}