input { pipeline { address => "OpenTraffic" } }
# Please note, that this pipeline handles three different event types:
# 1. A transactionSummary which contains summary information
# 2. A transactionElement event, which contains all legs
# 3. A circuitPath event
filter {
  # Parse the received payload into a JSON-Object
  json {
      source => "[message]"
      target => "[message]"
  }
  # Use the given timestamp from OpenLog for the logstash timestamp send to ElasticSearch
  date {
      match => [ "timestamp", "UNIX_MS" ]
  }
  mutate {
    remove_field => ["agent", "ecs", "log", "host", "timestamp", "logType", "event" ]
  }
  # Take the given gatewayName (provided by filebeat) and replace the serviceName with that value 
  mutate {
    add_field => { "[processInfo][gatewayName]" => "%{[gatewayName]}" }
    add_field => { "[processInfo][gatewayRegion]" => "%{[gatewayRegion]}" }
    remove_field => [ "gatewayRegion", "gatewayName", "[processInfo][serviceName]", "[processInfo][domainId]" ]
    add_field => { "[@metadata][ignoreField][apiPath]" => "" } # Default values for apiPath
    add_field => { "[@metadata][ignoreField][policyName]" => "" } # and policyName used for ingoreLookup
  }
  # First, is to check if the document should be ignored/dropped (configured based on the apiPath or PolicyName)
  if([transactionSummary] and [transactionSummary][path]) { # Only if a path is given (not given for instance for Scheduled-Policies)
    mutate { replace => { "[@metadata][ignoreField][apiPath]" => "%{[transactionSummary][path]}" } }
  } else if ([transactionElement] and [transactionElement][protocolInfo][http][uri]) { # uri is not given for Non-HTTP legs
    mutate { replace => { "[@metadata][ignoreField][apiPath]" => "%{[transactionElement][protocolInfo][http][uri]}" } }
  } else if ([circuitPath] and [circuitPath][0][policy]) { # Policy is for instance not given for OPTIONS requests
    mutate { replace => { "[@metadata][ignoreField][policyName]" => "%{[circuitPath][0][policy]}" } }
  } else { # For everything else (e.g. JMS-Legs) perform no lookup (Set the default to not ignore)
    mutate { add_field => { "[isIgnoreAPI][ignore]" => "false" } }
  }
  # Create a cache key for the Policy
  mutate {
    add_field => { "[@metadata][ignoreLookupCacheKey]" => "%{[@metadata][ignoreField][apiPath]}###%{[@metadata][ignoreField][policyName]}" }
  }
  # Lookup the cache is the document should be ignored
  memcached {
    hosts => "${MEMCACHED}"
    namespace => "ignoredAPIs"
    get => { "%{[@metadata][ignoreLookupCacheKey]}" => "[isIgnoreAPI]" }
  }
  # If we don't know yet, consult the API-Builder API
  if !([isIgnoreAPI]) {
    http {
      id => "Ignore API check"
      url => "${API_BUILDER_URL}/api/elk/v1/api/lookup/api/ignore"
      query => {
        "policyName" => "%{[@metadata][ignoreField][policyName]}"
        "apiPath" => "%{[@metadata][ignoreField][apiPath]}"
        "groupId" => "%{[processInfo][groupId]}"
        "region" => "%{[processInfo][gatewayRegion]}"
        "correlationId" => "%{[correlationId]}"
      }
      automatic_retries => 1 # 1 retry only, as this is not super important and should not block the entire processing
      cacert => "${API_BUILDER_SSL_CERT}"
      target_body => "isIgnoreAPI"
      add_field => { "[@metadata][updateIsIgnoreCache]" => "true" }
    }
  }
  # Drop the document if it should be ignored
  if ([isIgnoreAPI][ignore]) {
    ruby {
      code => 'logger.debug("Drop API/event as it should be ignored: ", "isIgnoreAPI" => event.get("[isIgnoreAPI]"), "ignoreLookupCacheKey" => event.get("[@metadata][ignoreLookupCacheKey]") );'
    }
    drop {}
  }
  # If the PolicyName or API-Path has been looked up right now add it to the cache
  if([@metadata][updateIsIgnoreCache]=="true") {
    ruby {
      code => 'logger.debug("Adding ignore status to cache: ", "isIgnoreAPI" => event.get("[isIgnoreAPI]"), "ignoreLookupCacheKey" => event.get("[@metadata][ignoreLookupCacheKey]") );'
    }
    memcached {
      hosts => "${MEMCACHED}"
      namespace => "ignoredAPIs"
      ttl => "${LOOKUP_CACHE_TTL:600}"
      set => { "[isIgnoreAPI]" => "%{[@metadata][ignoreLookupCacheKey]}" }
    }
  }
  mutate { remove_field => "[isIgnoreAPI]" }

  # Check, if event is a Scheduled-Policy - Most of the properties are NULL
  if([correlationId]!="000000000000000000000000" and ![circuitPath] and ![transactionElement] and ![transactionSummary][path] and ![transactionSummary][protocol] and ![transactionSummary][protocolSrc]) {
    mutate { 
      add_field => { 
      "[type]" => "scheduledPolicy"
      "[transactionSummary][serviceContext][service]" => "Scheduled policy"
      "[transactionSummary][serviceContext][method]" => "N/A"
      "[transactionSummary][duration]" => "-1"
      "[transactionElements][leg0][finalStatus]" => "Pass"
      "[transactionElements][leg0][protocolInfo][http][uri]" => "N/A"
      "[transactionElements][leg0][protocolInfo][http][status]" => "901"
      "[transactionElements][leg0][protocolInfo][http][statusText]" => "OK"
      "[transactionElements][leg0][protocolInfo][http][method]" => "N/A"
      } 
      remove_field => "[transactionSummary][serviceContexts]"
    }
  # For all other events do ...
  } else {
    # If a transactionElement event is received it must be re-arragended to support up-serts into ES
    if([transactionElement]) {
      ruby {
        code => "
          leg = event.get('transactionElement');
          no = event.get('[transactionElement][leg]');
          legNo = 'leg'.concat(no.to_s);
          event.set('[transactionElements][' + legNo + ']', leg);
        "
      }
      mutate {
        remove_field => ["transactionElement"]
      }
    }
    # If a transactionSummary event is received having a service context (which is an Array) get the first object and 
    # map it into a sinle object, as we can have only one
    if([transactionSummary][serviceContexts]) {
      ruby {
        # The Array might be empty
        code => "
          if event.get('[transactionSummary][serviceContexts][0]')
            leg = event.get('[transactionSummary][serviceContexts][0]');
            event.set('[transactionSummary][serviceContext]', leg);
          end
        "
      }
      mutate {
        remove_field => "[transactionSummary][serviceContexts]" # Remove the originally received serviceContexts array
        rename => ["[transactionSummary][serviceContext][org]", "[transactionSummary][serviceContext][appOrg]" ]
        remove_field => "[transactionSummary][serviceContext][client]" # We don't need the App-Client ID
        remove_field => "[transactionSummary][serviceContext][duration]" # We don't need the duration on a serviceContext
        remove_field => "[transactionSummary][serviceContext][status]" # Remove the status, as it's a duplicate to the status in the transactionSummary and not given for native APIs (e.g. Healthcheck)
      }
      # If we have a transactionSummary we have to enrich the API-Details (from API-Manager or locally looked up)
      # And only perform the API-Lookup for APIs (http/https) only
      if([transactionSummary] and [transactionSummary][protocol] in ["http", "https"]) {
        # Check, if an apiName is given (not the case for native APIs such as /healthcheck) to be used for the lookup
        if([transactionSummary][serviceContext][service]) {
          mutate { 
            add_field => { "[@metadata][apiName]" => "%{[transactionSummary][serviceContext][service]}" } 
            add_field => { "[@metadata][cacheAPIPerName]" => "${CACHE_API_PER_NAME}" } 
          }
        } else {
          # Without an API name, only API path is used for the API lookup.
          mutate { add_field => { "[@metadata][apiName]" => "" } }
        }
        # Create a cache key for the API either based on the entire request path or using the API-Name, when the request path 
        # contains path parameters. In that case, the user must configure the leading part of the API-Path
        # For example: /v1/get/pet/687687678 --> CACHE_API_PER_NAME = /v1/get/pet makes sure the API is cached based on the API-Name
        ruby {
          code => '
            cacheAPINames = event.get("[@metadata][cacheAPIPerName]");
            apiRequestPath = event.get("[transactionSummary][path]");
            logger.info("XXXXXXXXXXXX: ", { "cacheAPINames" => cacheAPINames, "apiRequestPath" => apiRequestPath } );
            if (cacheAPINames.nil?) 
              event.set("apiCacheKeyPrefix", apiRequestPath);
              logger.info("ZZZZZZZZZ");
              return;
            end
            apiName = event.get("[transactionSummary][serviceContext][service]");
            logger.info("Configured paths and Request path: ", { "cacheAPINames" => cacheAPINames, "apiRequestPath" => apiRequestPath } );
            event.set("apiCacheKeyPrefix", apiRequestPath);
            for configuredPath in cacheAPINames.split(",") do
              if(apiRequestPath.start_with?(configuredPath) ) 
                logger.info("Using API-Name as primary cache key, because path is configured. ", { "apiName" => apiName, "configuredPath" => configuredPath, "apiRequestPath" => apiRequestPath });
                event.set("apiCacheKeyPrefix", apiName);
                break;
              end
            end
          '
        }
        mutate {
          add_field => { 
            apiCacheKey => "%{apiCacheKeyPrefix}###%{[processInfo][groupId]}###%{[processInfo][gatewayRegion]}" 
          }
        }
        # Lookup the cache with the created API-Key (API-Name---API-Path)
        memcached {
          hosts => "${MEMCACHED}"
          namespace => "api_details"
          get => { "%{apiCacheKey}" => "[apiDetails]" }
        }
        # If we have nothing in the cache, perform the Lookup via the HTTP-Builder API, which does a local & API-Manager Lookup
        if !([apiDetails]) {
          http {
            id => "Get API Details"
            url => "${API_BUILDER_URL}/api/elk/v1/api/lookup/api"
            query => {
              "apiName" => "%{[@metadata][apiName]}"
              "apiPath" => "%{[transactionSummary][path]}"
              "groupId" => "%{[processInfo][groupId]}"
              "region" => "%{[processInfo][gatewayRegion]}"
              "correlationId" => "%{[correlationId]}"
            }
            automatic_retries => 10 # Try it for a few times as we really need this information
            cacert => "${API_BUILDER_SSL_CERT}"
            target_body => "apiDetails"
            add_field => { "[@metadata][updateAPICache]" => "true" }
          }
        }
        # At this point we should have the looked up apiDetails either from the cache or via the HTTP request
        if([apiDetails]) {
          mutate {
            copy => { "[apiDetails][organizationName]" => "[transactionSummary][serviceContext][apiOrg]" }
            copy => { "[apiDetails][version]" => "[transactionSummary][serviceContext][apiVersion]" }
            copy => { "[apiDetails][deprecated]" => "[transactionSummary][serviceContext][apiDeprecated]" }
            copy => { "[apiDetails][state]" => "[transactionSummary][serviceContext][apiState]" }
            copy => { "[apiDetails][apiSecurity]" => "[transactionSummary][serviceContext][apiSecurity]" }
            copy => { "[apiDetails][requestPolicy]" => "[transactionSummary][serviceContext][requestPolicy]" }
            copy => { "[apiDetails][routingPolicy]" => "[transactionSummary][serviceContext][routingPolicy]" }
            copy => { "[apiDetails][responsePolicy]" => "[transactionSummary][serviceContext][responsePolicy]" }
            copy => { "[apiDetails][faulthandlerPolicy]" => "[transactionSummary][serviceContext][faulthandlerPolicy]" }
            copy => { "[apiDetails][backendBasePath]" => "[transactionSummary][serviceContext][backendBasePath]" }
            # Take over configured custom properties for this API
            copy => { "[apiDetails][customProperties]" => "[transactionSummary][customProperties]" }
          }
          # The ServiceName and the operation will be taken over only if a name was found at all. This is not the 
          # case if the API does not exist in the API Manager and has not been configured locally. 
          # Furthermore, the ServiceName and Operation will not be applied if the ServiceContext has already been set. 
          # For example with APIs that run through the API Manager and the filter: Set Service Context was used.
          if !([transactionSummary][serviceContext][service] and [apiDetails][name]) {
            mutate {
              copy => { "[apiDetails][name]" => "[transactionSummary][serviceContext][service]" }
              copy => { "[apiDetails][method]" => "[transactionSummary][serviceContext][method]" }
            }
          }
          # If the API has been looked up add it to the cache
          if([@metadata][updateAPICache]=="true") {
            ruby {
              code => 'logger.debug("Adding API-Lookup details to cache: ", "apiDetails" => event.get("[apiDetails]"), "apiCacheKey" => event.get("[apiCacheKey]") );'
            }
            memcached {
              hosts => "${MEMCACHED}"
              namespace => "api_details"
              ttl => "${LOOKUP_CACHE_TTL:600}"
              set => { "[apiDetails]" => "%{apiCacheKey}" }
            }
          }
        }
        mutate {
          remove_field => [ "apiDetails", "updateAPICache", "apiCacheKey" ]
        }
      }
    }
  }
  # Don't do the following for scheduledPolicy events are just supposed to be shown in the Traffic-Monitor only
  # Summary index is for Kibana dashboards / analytics
  if([type] != "scheduledPolicy") {
    # Transaction Summary information (which is fulfilled at this point) needs to be cloned into a separate summary index
    if [transactionSummary] or [transactionElements][leg0] {
      clone {
        clones => ['summaryIndex']
      }
      if([type] == 'summaryIndex') {
        if([transactionSummary]) {
          # Change status value of transactionSummary to be aligned with finalStatus
          translate {
            field => "[transactionSummary][status]"
            destination => "[transactionSummary][finalStatus]"
            dictionary => {
              "success" => "Pass"
              "failure" => "Fail" 
              "exception" => "Error"
            }
            remove_field => "[transactionSummary][status]"
          }
          # Place all transactionSummary information directlly into the root, as it makes no sense to have a 
          # transactionSummary object within the transactionSummary index.
          ruby {
            code => '
              event.remove("[transactionSummary][path]");
              event.get("transactionSummary").each { |k, v|
                event.set(k,v);
              }
              event.remove("transactionSummary");
            '
          }
        }
        # If a transactionElement.leg0 is processed, copy some leg0 information into the summary index
        if [transactionElements][leg0] {
          if [transactionElements][leg0][protocolInfo][jms] {
            # We don't need all the information in the Summary Index, so some will be removed.
            mutate { 
              # For JMS preserve the headers as they contain the JMS-Properties that can be used for filtering
              remove_field => [
                "[transactionElements][leg0][leg]",
                "[transactionElements][leg0][protocolInfo][recvPayload]", 
                "[transactionElements][leg0][protocolInfo][sentPayload]"
              ]
            }
          } else {
            mutate { 
              remove_field => [
                "[transactionElements][leg0][leg]",
                "[transactionElements][leg0][protocolInfo][recvHeader]",
                "[transactionElements][leg0][protocolInfo][recvPayload]", 
                "[transactionElements][leg0][protocolInfo][sentPayload]",
                "[transactionElements][leg0][protocolInfo][sentHeader]"
              ]
            }
          }
          ruby {
            # This copies all kind of traffic information (http, filetransfer, ...) to the root of the document (e.g. http.status, http.uri, ...)
            code => '
              event.get("[transactionElements][leg0][protocolInfo]").each { |k, v|
                event.set(k,v)
              }
            '
          }
          # A native API may contain a serviceName & operation
          # If it exists, this ServiceName is copied to the TransactionSummary ServiceContext.
          # For managed APIs (API-Manager based) it's the same anyway
          if [transactionElements][leg0][serviceName] {
            mutate {
              copy => { "[transactionElements][leg0][serviceName]" => "[serviceContext][service]" }
              copy => { "[transactionElements][leg0][operation]" => "[serviceContext][method]" }
            }
          }
          mutate {
            copy => { "[transactionElements][leg0][duration]" => "[duration]" }
            copy => { "[transactionElements][leg0][finalStatus]" => "[finalStatus]" }
            # Once we have copied - we can remove the original information from the summaryIndex event
            remove_field => ["transactionElements"] 
          }
          # For some requests (OPTIONS, some native calls) the finalStatus is not set - Set it based on the http.status
          # Extra check, if field [http][status] exists is a must (See https://github.com/elastic/logstash/issues/11917)
          if( ![finalStatus] ) {
            if ([http][status] and [http][status] >= 200 and [http][status] <= 299 ) {
              mutate { add_field => { "[finalStatus]" => "Pass" } }
            } else {
              mutate { add_field => { "[finalStatus]" => "Fail" } }
            }
          }
          # Try to translate the applicationId (e.g. 180b1f32-d72f-40f4-949a-fc3f3f7dec2c) into a meaningful application-name
          if ([http]) { # Translation only supported for HTTP-Requests
            grok {
              match => { "[http][authSubjectId]" => "^.{8}-.{4}-.{4}-.{4}-.{12}$" }
              tag_on_failure => ["_authNSubjectNoUUID"]
            }
            # Only perform a lookup if the AuthN-Subject-ID is a UUID
            if !("_authNSubjectNoUUID" in [tags]) {
              # Lookup the application in the cache
              memcached {
                hosts => "${MEMCACHED}"
                namespace => "applications"
                get => { "%{[http][authSubjectId]}" => "[application]" }
              }
              # If we don't know the application yet, reach out to the API-Builder
              if !([application]) {
                http {
                  id => "Translate App-ID"
                  url => "${API_BUILDER_URL}/api/elk/v1/api/lookup/application"
                  query => {
                    "applicationId" => "%{[http][authSubjectId]}"
                    "groupId" => "%{[processInfo][groupId]}"
                    "region" => "%{[processInfo][gatewayRegion]}"
                    "correlationId" => "%{[correlationId]}"
                  }
                  automatic_retries => 1 # 1 retry only, as this is not super important and should not block the entire processing
                  cacert => "${API_BUILDER_SSL_CERT}"
                  target_body => "application"
                  add_field => { "[@metadata][updateAppCache]" => "true" }
                }
              }
              # If the application has been looked up right now add it to the cache
              if([@metadata][updateAppCache]=="true") {
                ruby {  code => 'logger.info("Adding application details to cache: ", "application" => event.get("[application]") );'}
                memcached {
                  hosts => "${MEMCACHED}"
                  namespace => "applications"
                  ttl => "${LOOKUP_CACHE_TTL:600}"
                  set => { "[application]" => "%{[http][authSubjectId]}" }
                }
              }
              # Get the application name
              mutate { 
                replace => { "[http][authSubjectId]" => "%{[application][name]}" } 
                remove_field => [ "application" ]
              }
            }
            mutate {  
              remove_tag => [ "_authNSubjectNoUUID"] 
            }
          }
        }
      } 
    }
  }
  mutate { remove_field => ["headers"] }
}

output {
  if [type] == "summaryIndex" or [type] == "scheduledPolicy" {
    elasticsearch {
      hosts => "${ELASTICSEARCH_HOSTS}"
      ssl => true
      ssl_certificate_verification => "${ELASTICSEARCH_SSL_VERIFICATIONMODE}"
      cacert => "${ELASTICSEARCH_CERT}"
      user => "${LOGSTASH_USERNAME}"
      password => "${LOGSTASH_PASSWORD}"
      index => "apigw-traffic-summary%{[@metadata][regionIndexSuffix]}"
      document_id => "%{correlationId}"
      action => "update"
      doc_as_upsert => true
      id => "TrafficSummary"
    }
  } else {
    elasticsearch {
      hosts => "${ELASTICSEARCH_HOSTS}"
      ssl => true
      ssl_certificate_verification => "${ELASTICSEARCH_SSL_VERIFICATIONMODE}"
      cacert => "${ELASTICSEARCH_CERT}"
      user => "${LOGSTASH_USERNAME}"
      password => "${LOGSTASH_PASSWORD}"
      index => "apigw-traffic-details%{[@metadata][regionIndexSuffix]}"
      document_id => "%{correlationId}"
      action => "update"
      doc_as_upsert => true
      id => "StandardTrafficDetails"
    }
  }
# Enable if you would like to see outgoing event messages
#  stdout {
#    codec => rubydebug
#  }
}