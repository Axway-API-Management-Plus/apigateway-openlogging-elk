input { pipeline { address => "Events" } }

filter {
  # Use the given timestamp from the event for the logstash timestamp and send to ElasticSearch
  date {
      match => [ "time", "UNIX_MS" ]
  }
  if [type] != "system" and [type] != "alert" {
    drop { }
  }
  mutate {
    add_field => { "[processInfo][gatewayName]" => "%{[gatewayName]}" }
    add_field => { "[processInfo][gatewayRegion]" => "%{[gatewayRegion]}" }
    remove_field => [ "agent", "log", "logtype", "tags", "ecs", "time", "gatewayRegion", "gatewayName", "host", "id", "event" ]
  }
}

output {
  if [correlationId] {
    elasticsearch {
      hosts => "${ELASTICSEARCH_HOSTS}"
      ssl => true
      cacert => "${ELASTICSEARCH_CERT}"
      user => "${LOGSTASH_USERNAME}"
      password => "${LOGSTASH_PASSWORD}"
      index => "apigw-traffic-details%{[@metadata][regionIndexSuffix]}"
      document_id => "%{correlationId}"
      action => "update"
      doc_as_upsert => true
      id => "TrafficEventInformation" # Not used today - For instance to support custom properties
    }
  } else {
    elasticsearch {
      hosts => "${ELASTICSEARCH_HOSTS}"
      ssl => true
      cacert => "${ELASTICSEARCH_CERT}"
      user => "${LOGSTASH_USERNAME}"
      password => "${LOGSTASH_PASSWORD}"
      index => "apigw-monitoring%{[@metadata][regionIndexSuffix]}"
      id => "MonitoringInformation"
    }
  }
# Enable if you would like to see outgoing event messages
#  stdout {
#    codec => rubydebug
#  }
}