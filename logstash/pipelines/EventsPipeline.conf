input { pipeline { address => "Events" } }

filter {
  # Use the given timestamp from the event for the logstash timestamp and send to ElasticSearch
  date {
      match => [ "time", "UNIX_MS" ]
  }
  if [type] == "system" or [type] == "alert" {
    mutate {
      add_field => { "[processInfo][gatewayName]" => "%{[gatewayName]}" }
      add_field => { "[processInfo][gatewayRegion]" => "%{[gatewayRegion]}" }
      remove_field => [ "agent", "log", "logtype", "tags", "ecs", "time", "gatewayRegion", "gatewayName", "host", "id", "event" ]
      # Convert give KBytes into Bytes as they can be visualized better in Kibana
      update => { "instMem" => "%{[instMem]}000" }
      update => { "sysMem" => "%{[sysMem]}000" }
      update => { "sysMemTotal" => "%{[sysMemTotal]}000" }
    }
  # Handle transaction events that contain either 
  # - some custom attributes 
  # - leg information, that might be used to translate the Geo-Location
  # Otherwise they will be dropped
  } else if ([type] == "transaction") {
    # 
    mutate {
      add_field => { "[@metadata][dropEvent]" => "true" }
    }
    if ("${GEOIP_ENABLED}" == "true") {
      # If given use the x-forwarded-for attribute, that may contain users IP-Address
      if ([customMsgAtts][xForwardedFor]) {
        # If given, translate the received x-forwarded-for custom attribute into a Geo-Location 
        geoip {
          "source" => "[customMsgAtts][${GEOIP_CUSTOM_ATTRIBUTE}]"
          "target" => "[http][remoteGeoIp]"
          "cache_size" => "${GEOIP_CACHE_SIZE}"
          "id" => "GeoIP-X-Forwarded-For"
          "fields" => [ "city_name", "continent_code", "country_code2", "country_name", "location"]
          add_field => { "[@metadata][dropEvent]" => "false" }
        }
      } else if [legs] and [legs][0] { 
        # Otherwise if there is at least one leg use the remoteAddr
        geoip {
          "source" => "[legs][0][remoteAddr]"
          "target" => "[http][remoteGeoIp]"
          "cache_size" => "${GEOIP_CACHE_SIZE}"
          "id" => "GeoIP-RemoteAddr"
          "fields" => [ "city_name", "continent_code", "country_code2", "country_name", "location"]
          add_field => { "[@metadata][dropEvent]" => "false" }
        }
      }
    }
    # Only if Eventlog custom properties are configured we take care about it, by sending them to ES
    if (${EVENTLOG_CUSTOM_ATTR} and [customMsgAtts]) {
      mutate {
        add_field => { "[@metadata][dropEvent]" => "false" }
      }
    }
    # If events contains a transactionId
    if [customMsgAtts][transactionId] {
      mutate {
        # The transactionId should be stored on root level
        add_field => { "[transactionId]" => "%{[customMsgAtts][transactionId]}" }
        # Remove all other fields besides the correlationId and customMsgAtts (for future use)
        remove_field => [ "@timestamp", "host", "type", "time", "path", "protocol", "protocolSrc", "duration", "status", "serviceContexts", "legs", "[customMsgAtts][transactionId]", "gatewayName", "gatewayRegion" ]
        # Document should be stored, as it contained a transactionId
        add_field => { "[@metadata][dropEvent]" => "false" }
      }
    }
    # Drop the event, if it contains nothing useful
    if([@metadata][dropEvent]=="true") {
      drop { }
    }
  # All other events we drop
  } else {
    drop { }
  }
}

output {
  if [correlationId] {
    elasticsearch {
      hosts => "${ELASTICSEARCH_HOSTS}"
      ssl => true
      ssl_certificate_verification => "${ELASTICSEARCH_SSL_VERIFICATIONMODE}"
      cacert => "${ELASTICSEARCH_CERT}"
      user => "${LOGSTASH_USERNAME}"
      password => "${LOGSTASH_PASSWORD}"
      index => "apigw-traffic-summary%{[@metadata][regionIndexSuffix]}"
      document_id => "%{correlationId}"
      action => "update"
      doc_as_upsert => true
      id => "TrafficEventInformation" # Not used today - For instance to support custom properties
    }
  } else {
    elasticsearch {
      hosts => "${ELASTICSEARCH_HOSTS}"
      ssl => true
      ssl_certificate_verification => "${ELASTICSEARCH_SSL_VERIFICATIONMODE}"
      cacert => "${ELASTICSEARCH_CERT}"
      user => "${LOGSTASH_USERNAME}"
      password => "${LOGSTASH_PASSWORD}"
      index => "apigw-monitoring%{[@metadata][regionIndexSuffix]}"
      id => "MonitoringInformation"
    }
  }
# Enable if you would like to see outgoing event messages
#  stdout {
#    codec => rubydebug
#  }
}